/* 
 * Input files are generated by preprocess.nf
 */
params.orig_vcf = 'out/preprocessing/all.vcf'
orig_vcf = file(params.orig_vcf)

process create_vcf_copy_with_timepoint_prefix {
  input:
    file orig_vcf from orig_vcf
    val timepoint from params.timepoints
  output:
    set timepoint, "time_${timepoint}.vcf.gz" into timepointVcfCh
    file "time_${timepoint}.vcf.gz.csi" into timepointVcfIndexCh
  shell:
  '''
  dst="time_!{timepoint}.vcf.gz"
  mkdir -p tmp
  tmp_dir=$(mktemp -d -p tmp)
  tmp=$(mktemp -p tmp)
  src=$tmp_dir/orig.vcf.gz
  bgzip -c !{orig_vcf} > $src
  bcftools query -l $src | awk -v g=!{timepoint}_ '{ print g $0 }'  > $tmp
  bcftools reheader -s $tmp $src > $dst
  bcftools index $dst
  rm -fr $tmp_dir # deletes $tmp and $tmp_dir
  '''
}
timepointVcfCh.into { allTimepointsInputCh; timepointsVcfCh }

process merge_all_vcf_timepoints {
  input:
    set file(vcf_0), file(vcf_10), file(vcf_30), file(vcf_180) from allTimepointsInputCh.map{ it[1] }.toList()
    file tpIndices from timepointVcfIndexCh.toList()
  output:
    set val('all'), 'all_timepoints.vcf.gz' into mergedVcfCh
  """
  bcftools merge -o all_timepoints.vcf.gz -O z $vcf_0 $vcf_10 $vcf_30 $vcf_180
  """
}

timepointsVcfCh
  .mix(mergedVcfCh)
  .set{vcfCh}
